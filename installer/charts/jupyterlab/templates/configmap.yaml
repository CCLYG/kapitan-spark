{{- $lighterServiceName := "" }}
{{ if and .Values.global ( .Values.global.isTopLevel) }}
{{ else }}
  {{- $lighterNamespace := index .Values "lighter" "namespace" -}}
  {{ range $index, $service := (lookup "v1" "Service" $lighterNamespace "").items }}
      {{ range $element := $service.spec.ports -}}
          {{ range $key, $value := $element -}}
              {{ if and (eq "port" $key) (eq 8080 $value) }}
                  {{- $lighterServiceName = $service.metadata.name }}
                  {{ break }}
              {{ end }}
          {{ end }}
      {{ end }}
  {{ end }}
  {{- if eq $lighterServiceName "" }}
  {{- fail ( printf "Cannot find lighter service in namespace: %s, update variable lighter.namespace in values.yaml" $lighterNamespace) }}
  {{- end }}
{{ end }}

apiVersion: v1
kind: ConfigMap
metadata:
    name: {{ include "jupyterlab.fullname" . }}-sparkmagic
    namespace: {{ .Release.Namespace }}
    labels:
        {{- include "jupyterlab.labels" $ | trim | nindent 4 }}
data:
  sparkmagic: |
      {
        "kernel_python_credentials" : {
          "username": "please enter correct username",
          "password": "please enter correct password",
          "url": "http://{{ if and .Values.global ( .Values.global.isTopLevel) }}{{ .Release.Name }}-lighter{{ else }}{{ required "lighter server installed full service name required" $lighterServiceName }}{{ end }}.{{ if and .Values.global ( .Values.global.isTopLevel) }}{{ .Release.Namespace }}{{ else }}{{ required "lighter server installed namespace required" .Values.lighter.namespace }}{{ end }}.svc.cluster.local:8080/lighter/api",
          "auth": "Basic_Access"
        },

        "logging_config": {
          "version": 1,
          "formatters": {
            "magicsFormatter": { 
              "format": "%(asctime)s\t%(levelname)s\t%(message)s",
              "datefmt": ""
            }
          },
          "handlers": {
            "magicsHandler": { 
              "class": "hdijupyterutils.filehandler.MagicsFileHandler",
              "formatter": "magicsFormatter",
              "home_path": "~/.sparkmagic"
            }
          },
          "loggers": {
            "magicsLogger": { 
              "handlers": ["magicsHandler"],
              "level": "DEBUG",
              "propagate": 0
            }
          }
        },
        "authenticators": {
          "Kerberos": "sparkmagic.auth.kerberos.Kerberos",
          "None": "sparkmagic.auth.customauth.Authenticator", 
          "Basic_Access": "sparkmagic.auth.basic.Basic"
        },

        "wait_for_idle_timeout_seconds": 120,
        "livy_session_startup_timeout_seconds": 3200,

        "fatal_error_suggestion": "The code failed because of a fatal error:\n\t{}.\n\nSome things to try:\na) Make sure Spark has enough available resources for Jupyter to create a Spark context.\nb) Contact your Jupyter administrator to make sure the Spark magics library is configured correctly.\nc) Restart the kernel.",

        "ignore_ssl_errors": false,

        "session_configs": {
          "executorMemory": "2G",
          "executorCores": 1,
          "driverMemory" : "2G",
          "driverCores" : 1
        },

        "use_auto_viz": true,
        "coerce_dataframe": true,
        "max_results_sql": 2500,
        "pyspark_dataframe_encoding": "utf-8",
        
        "heartbeat_refresh_seconds": 30,
        "livy_server_heartbeat_timeout_seconds": 0,
        "heartbeat_retry_seconds": 10,

        "server_extension_default_kernel_name": "pysparkkernel",
        "custom_headers": {
          "X-Compatibility-Mode": "sparkmagic"
        },
        
        "retry_policy": "configurable",
        "retry_seconds_to_sleep_list": [0.2, 0.5, 1, 3, 5],
        "configurable_retry_policy_max_retries": 8
      }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "jupyterlab.fullname" . }}-custom-file
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "jupyterlab.labels" $ | trim | nindent 4 }}
binaryData:
  requirements.txt:
    {{ .Files.Get "requirements.txt" | b64enc | nindent 4 }}
  start-notebook.sh:
    {{ .Files.Get "start-notebook.sh" | b64enc | nindent 4 }}

