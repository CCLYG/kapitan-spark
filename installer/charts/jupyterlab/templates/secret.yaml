{{- $lighterServiceName := "" }}
{{ if and .Values.global ( .Values.global.isTopLevel) }}
{{ else }}
  {{- $lighterNamespace := index .Values "lighter" "namespace" -}}
  {{ range $index, $service := (lookup "v1" "Service" $lighterNamespace "").items }}
      {{ range $element := $service.spec.ports -}}
          {{ range $key, $value := $element -}}
              {{ if and (eq "port" $key) (eq 8080 $value) }}
                  {{- $lighterServiceName = $service.metadata.name }}
                  {{ break }}
              {{ end }}
          {{ end }}
      {{ end }}
  {{ end }}
  {{- if eq $lighterServiceName "" }}
  {{- fail ( printf "Cannot find lighter service in namespace: %s, update variable lighter.namespace in values.yaml" $lighterNamespace) }}
  {{- end }}
{{ end }}

apiVersion: v1
kind: Secret
metadata:
  name: {{ include "jupyterlab.fullname" . }}-secret
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "jupyterlab.labels" $ | trim | nindent 4 }}
type: Opaque
stringData:
  quickstart: |
    {
     "cells": [
      {
       "cell_type": "code",
       "execution_count": null,
       "id": "5f7b82b2-99bc-4ce3-ad35-bb2a3a95b4b5",
       "metadata": {},
       "outputs": [],
       "source": [
        "%_do_not_call_change_endpoint --username dataOps --password {{ .Values.lighterPassword }} --server http://{{ if and .Values.global ( .Values.global.isTopLevel) }}{{ .Release.Name }}-lighter{{ else }}{{ required "lighter server installed full service name required" $lighterServiceName }}{{ end }}.{{ if and .Values.global ( .Values.global.isTopLevel) }}{{ .Release.Namespace }}{{ else }}{{ required "lighter server installed namespace required" .Values.lighter.namespace }}{{ end }}.svc.cluster.local:8080/lighter/api"                                       
       ]
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "id": "c72ef05c-13ee-4199-a002-b2be815ce419",
       "metadata": {},
       "outputs": [],
       "source": [
        "%%configure\n",
        "{\n",
        "    \"conf\":{\n",
        "    \"spark.kubernetes.container.image.pullPolicy\": \"Always\",\n",
        "    \"spark.driver.memory\" : \"500m\",\n",
        "    \"spark.executor.memory\": \"500m\"\n",
        "    }\n",
        "}"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "id": "94d68783-5c86-440e-84da-aa8be288cdd5",
       "metadata": {},
       "outputs": [],
       "source": [
        "df = spark.createDataFrame(\n",
        "    [\n",
        "        (1, \"foo\"),\n",
        "        (2, \"bar\"),\n",
        "    ],\n",
        "    [\"id\", \"label\"]\n",
        ")\n",
        "df.collect()"
       ]
      }
     ],
     "metadata": {
      "kernelspec": {
       "display_name": "PySpark",
       "language": "python",
       "name": "pysparkkernel"
      },
      "language_info": {
       "codemirror_mode": {
        "name": "python",
        "version": 3
       },
       "file_extension": ".py",
       "mimetype": "text/x-python",
       "name": "pyspark",
       "pygments_lexer": "python3"
      }
     },
     "nbformat": 4,
     "nbformat_minor": 5
    }

  jupyter_notebook_config: |
    c = get_config()
    c.NotebookApp.password = '{{ .Values.jupyterPassword}}'