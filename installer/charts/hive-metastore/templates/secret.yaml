{{- $postgresqlDatabase := index .Values "hive-metastore-postgresql" "auth" "database" -}}
{{- $postgresqlUsername := index .Values "hive-metastore-postgresql" "auth" "username" -}}
{{- $postgresqlPassword := index .Values "hive-metastore-postgresql" "auth" "password" -}}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "hive-metastore.fullname" . }}-secret
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "hive-metastore.labels" $ | trim | nindent 4 }}
type: Opaque
stringData:
  metastore-site.xml.tpl: |
    <configuration>
            <property>
              <name>javax.jdo.option.ConnectionURL</name>
              <value>jdbc:postgresql://{{ include "hive-metastore.fullname" . }}-postgresql:5432/{{ required "Postgresql database name required" $postgresqlDatabase }}</value>
            </property>
            <property>
              <name>javax.jdo.option.ConnectionDriverName</name>
              <value>org.postgresql.Driver</value>
            </property>
            <property>
              <name>javax.jdo.option.ConnectionUserName</name>
              <value>{{ required "Postgresql username required" $postgresqlUsername }}</value>
            </property>
            <property>
              <name>javax.jdo.option.ConnectionPassword</name>
              <value>{{ required "Postgresql password required" $postgresqlPassword }}</value>
            </property>
            <property>
              <name>hive.metastore.warehouse.dir</name>
              <value>file:///tmp/</value>
            </property>
            <property>
              <name>metastore.expression.proxy</name>
              <value>org.apache.hadoop.hive.metastore.DefaultPartitionExpressionProxy</value>
            </property>
            <property>
              <name>metastore.task.threads.always</name>
              <value>org.apache.hadoop.hive.metastore.events.EventCleanerTask,org.apache.hadoop.hive.metastore.MaterializationsCacheCleanerTask</value>
            </property>
            <property>
              <name>datanucleus.autoCreateSchema</name>
              <value>false</value>
            </property>
            <property>
              <name>fs.s3a.path.style.access</name>
              <value>true</value>
            </property>
    </configuration>


  entrypoint.sh: |
    #!/bin/bash

    function log () {
        level=$1
        message=$2
        echo $(date  '+%d-%m-%Y %H:%M:%S') [${level}]  ${message}
    }

    HIVE_CONF_DIR="${METASTORE_HOME}/conf"

    if [ -d ${HIVE_CONF_DIR}/templates ]; then
      log "INFO" "🤖- Te(Go)mplating files!"
      log "INFO" "🗃️- Files to templating:"
      log "INFO" $(find ${HIVE_CONF_DIR}/templates/* -maxdepth 1)
      for file in $(ls -1 ${HIVE_CONF_DIR}/templates | grep -E '\.tpl$'); do
        log "INFO" "🚀- Templating $file"
        out_file=${file%%.tpl}
        gomplate -f ${HIVE_CONF_DIR}/templates/${file} -o ${HIVE_CONF_DIR}/${out_file}

        if [ $? -ne 0 ]; then
          log "ERROR" "Error rendering config template file ${HIVE_CONF_DIR}/${out_file}. Aborting."
          exit 1
        fi
        log "INFO" "Generated config file from template in ${HIVE_CONF_DIR}/${out_file}"
      done
    fi

    SCHEMA_TOOL="${USER_HOME}/opt/apache-hive-metastore-3.0.0-bin/bin/schematool"
    
    ${SCHEMA_TOOL} --verbose -dbType postgres -info -userName {{ $postgresqlUsername }} -passWord {{ $postgresqlPassword }} -url jdbc:postgresql://{{ include "hive-metastore.fullname" . }}-postgresql/metastore &> /tmp/check_postgres_scheme_created.log

    cat /tmp/check_postgres_scheme_created.log | grep 'Failed to get schema version'
    if [ $? == 0 ]; then
      echo "create schema "
      ${SCHEMA_TOOL} --verbose -dbType postgres -initSchema -userName {{ $postgresqlUsername }} -passWord {{ $postgresqlPassword }} -url jdbc:postgresql://{{ include "hive-metastore.fullname" . }}-postgresql/metastore?createDatabaseIfNotExist=true 

    else
      echo "skip creationg of schema"
    fi

    HIVE_START_CMD="${USER_HOME}/opt/hive-metastore/bin/start-metastore"

    log "INFO" "Starting Hive Metastore service. Command: ${HIVE_START_CMD}"

    exec "$HIVE_START_CMD"
  


